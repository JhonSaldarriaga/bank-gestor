package model;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.time.LocalDate;

public class RandomGenerator {
	private int amount;
	private String[] names;
	public static final long[] ID= {1862673,1133737,1716165,3954879,1257858,2241649,2671940,3012213,571073,2836368,1373961,799396,2734502,1504533,1400818,3469765,3482469,377251,2826705,670203,3294578,1412782,3640379,1865713,2356500,3444876,3704589,166504,3587988,1559593,433481,656520,2886317,429296,3076538,1970600,848168,1843262,1091636,247787,622098,516805,2483843,1795687,285536,3237946,1250249,2840911,398587,1529961,3631638,1653165,297493,1995611,3953441,3769770,1113741,1629406,2333535,3753104,2546533,3148077,2009093,322114,1616840,1482838,1755799,223585,1724149,3313754,952984,1227944,2850238,3799280,3822636,747742,3139993,1920049,3988650,357442,772925,118520,3098221,1404507,3102052,1264948,1092121,2244054,1185248,1296682,2113674,651870,203001,2686229,3855016,2134452,2219880,557144,898071,2810462};
	public static final int[] ACCOUNTS= {978476879,446758849,388582539,222823426,487588746,794353363,522626328,396552229,632954586,385648522,569845854,996658666,987943958,782468773,263494628,427528454,663962457,932367947,494552283,987699439,265477942,654668635,867428347,855379234,368637696,773848238,568677825,948682963,489364785,797247724,892355269,579469873,792984544,342456473,992578439,845223547,646886529,899769679,944527476,953524579,273683638,835633966,684748477,465683698,375856332,589997677,222879756,657689595,333632836,642685622,737983258,523297762,849632542,526429656,667562745,698628438,785594638,727976463,496427834,522472465,976566288,967768824,548245763,496823365,533967764,433253376,427733738,289874495,299766683,826897538,324539997,792978352,744787534,784369379,947293862,343855485,624697675,636534397,923255732,584966224,759886639,746975855,572955834,964897642,264442223,462435693,923695438,572527393,639478495,895795985,538346494,396589399,959498873,825659893,873795434,953392687,669269984,353964559,536445969,877457786,383982395,855638549,669888799,692524594,473997449,756969543,733452478,344677944,955763782,566597438,452873565,723249322,222879964,264265478,323446228,737747424,999659727,272653859,279864694,753552226,334974398,272633543,929829998,893543353,344267235,728547332,448645689,862937652,999235888,572948872,246588776,392334864,234495762,676738473,675528439,946564745,494287898,577898623,282249524,596548447,932393224,273948545,329435893,676695242,296354664,889746563,335854278,557283629,632847456,623266497,456598682,944733523,272456332,537282225,629275569,953949285,778434898,436656889,685773577,879368567,599495656,655297288,485245272,959688868,977587745,384462872,439485679,493227297,575594283,275866947,697262532,498562736,279697747,888528852,263986433,492489933,335639289,999795979,855533256,644323634,654596669,892593255,993673723,593544242,284852948,979695986,554253597,478426795,228932399,982282973,426369759,583844535,978494837,352732423,885838732,975644455,386335635,553263529,943442848,723289934,963377352,227622537,788346546,988534778,426822582,429873967,727469645,594698858,538899767,845577284,746465328,239487593,943777895,366426943,474565532,695347483,639586694,369479836,574422582,993939429,254999586,435367386,398726828,738982758,895862775,967243595,347845954,894427546,288327885,878535968,447578828,244894563,586452545,232657282,469222688,449448486,745844869,945467444,637539352,772944878,593848837,767449565,387829966,983296953,492825955,274384472,364956829,778483475,785495388,742959545,254224834,498274895,782236877,388355754,525549442,528566943,667968586,295977756,388566777,984453456,364956993,487774328,392957833,546693729,533479773,829764852,684275568,396699792,776527527,464358296,264239344,438338598,296379948,547727854,758968285,224878884,845496755,284578564,522677648,885964888,526527224,458765754,436362772,785333388,692868945,957766875,266679466,999929298,657438763,888968588,395724227,694694774,644392274,425538549,262963962,477653876,895479489,266573626,826735723,972896467};
	private final double[] VALUES= {110447,133459,136181,145305,174613,209135,212019,295993,322815,351284,369018,400694,404645,404867,429569,441808,450670,454841,496962,517527,519878,522034,547705,553363,605063,639879,646087,698118,708215,712501,714140,739985,742155,745099,813660,832448,852414,884503,929306,954077,971162,1032485,1070013,1070032,1092648,1093017,1106047,1122594,1178048,1202010,1207835,1215362,1215923,1227782,1236386,1272123,1306186,1309186,1318299,1318844,1322422,1344917,1346229,1347489,1373761,1379309,1388069,1409387,1419482,1429521,1434854,1443607,1448028,1467084,1477055,1487073,1503678,1532135,1540415,1574458,1580593,1587290,1606670,1623914,1644836,1686608,1691595,1695280,1716852,1765309,1772271,1794371,1795381,1844188,1864370,1885351,1886102,1906569,2000631,2004746,2024603,2024948,2062125,2074912,2087326,2098345,2098387,2104965,2108949,2116684,2131189,2136644,2154455,2166388,2168832,2196992,2204505,2212442,2217705,2253397,2285148,2322665,2326057,2353220,2407933,2432593,2469059,2491931,2497529,2510331,2545190,2550460,2554683,2571474,2589954,2597450,2612422,2625521,2669556,2698889,2705785,2768413,2795250,2804269,2854135,2884111,2902507,2921494,2947895,2948056,3028934,3032405,3060607,3070506,3090085,3105879,3145821,3172048,3181670,3186940,3231306,3296792,3325043,3360887,3361632,3367894,3400460,3430533,3439406,3451829,3461279,3507249,3521081,3528818,3537736,3543117,3571249,3579143,3619357,3666110,3667581,3675319,3711076,3714265,3720932,3743740,3752332,3764627,3768186,3795633,3811257,3860876,3868657,3875998,3887085,3902983,3938571,3946330,3992278,3999620};
	public static String  PATHS= "data/Names.txt";
	public RandomGenerator(int amount) throws IOException{
		this.amount=amount;
		names= new String[amount];
		generateEverything();
	}
	
	public void generateEverything() throws IOException {
		 String path=PATHS;
			String line="";
			BufferedReader brN= new BufferedReader(new FileReader(path));
			while(line!=null) {
			for (int j = 0; j < amount; j++) {
					line=brN.readLine();
					if(line!=null) {
					names[j]=line;;
					}
				}	
			}
			brN.close();
	}

	
	public User generateUser(int index) {
			int priority=generatePriority();
			int moneyValue=(int)(Math.random()*100);
			CurrentAccount cAccount=new CurrentAccount(VALUES[moneyValue], String.valueOf(ACCOUNTS[index]));
			CreditCard creditAccount=new CreditCard(VALUES[index],  String.valueOf(ACCOUNTS[index]), (VALUES[index]-(int)(Math.random()*300000)), LocalDate.now());
		return new User((names[index]), String.valueOf(ID[index]), creditAccount, cAccount, priority); 
		
	}
	
	public int generatePriority() {
		int priority=(int)(Math.random()*20+1);
		if((priority>5 && priority<=15)) {
			return 0;
		}else if(priority>1 && priority<=2) {
			return 1;
		}else if((priority>2 && priority<=3)) {
			return 2;
		}else if((priority>3 && priority<=4)) {
			return 3;
		}
		return 0;
	}

	public long getId(int index) {
		return ID[index];
	}
}

